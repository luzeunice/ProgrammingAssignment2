makeCacheMatrix <- function(x = matrix()) {
mat <- NULL
set <- function(y) {
x <<- y
mat <<- NULL
}
get <- function() x
setInv <- function(I) mat <<- I
getInv <- function() mat
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
a <- makeCacheMatrix(matrix(1:4,2))
a$get()
a$getInverse()
a$set(matrix(5:8,2))
a$getInverse()
a$get()
cacheSolve(a)
makeCacheMatrix(a)
makeCacheMatrix <- function(x = matrix()) {
mat <- NULL
set <- function(y) {
x <<- y
mat <<- NULL
}
get <- function() x
setInv <- function(Inv) mat <<- Inv
getInv <- function() mat
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
makeCacheMatrix(a)
makeCacheMatrix <- function(x = matrix()) {
mat <- NULL
set <- function(y) {
x <<- y
mat <<- NULL
}
get <- function() x
setInv <- function(Inve) mat <<- Inve
getInv <- function() mat
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
a$get()
makeCacheMatrix(a)
a$getInverse()
cacheSolve <- function(x, ...) {
mat <- x$getInv()
if(!is.null(mat)) {
message("getting cached data")
return(mat)
}
data  <-  x$get()
mat   <-  solve(data)
x$setInv(mat)
mat
}
makeCacheMatrix(a)
cacheSolve(a)
